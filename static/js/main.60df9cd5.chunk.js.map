{"version":3,"sources":["component/TodoListTemplate.js","component/Form.js","component/TodoItem.js","component/TodoItemList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListRemplate","_ref","form","children","react_default","a","createElement","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","_this$props","this","props","text","checked","id","onToggle","onRemove","e","stopPropagation","concat","Component","TodoItemList","todos","todoList","map","src_component_TodoItem","key","App","state","input","handleChange","_this","setState","target","handleCreate","_this$state","handleKeyPress","handleToggle","index","findIndex","todo","selected","nextTodos","Object","toConsumableArray","objectSpread","handleRemove","filter","_this$state2","component_TodoListTemplate","src_component_Form","component_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60df9cd5.chunk.js","sourcesContent":["// 이 컴포넌트는 함수형 컴포넌트이다\r\n\r\nimport React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListRemplate = ({form, children}) => {\r\n    return(\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘의 할일\r\n            </div>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                { children }\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoListRemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\r\n    return (\r\n        <div className= \"form\">\r\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n            <div className=\"create-button\" onClick={onCreate}>\r\n                검색\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component{\r\n    render(){\r\n        let {text, checked, id, onToggle, onRemove} = this.props;\r\n\r\n        return(\r\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n                onRemove(id)}\r\n                }>&times;</div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div> )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component{\r\n    render(){\r\n        let {todos, onToggle, onRemove} = this.props;\r\n\r\n        let todoList = todos.map(\r\n            ({id,text,checked}) => (\r\n                <TodoItem\r\n                    id = {id}\r\n                    text = {text}\r\n                    checked = {checked}\r\n                    onToggle = {onToggle}\r\n                    onRemove = {onRemove}\r\n                    key = {id}\r\n                />\r\n            )\r\n        );\r\n\r\n        return(\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React, { Component } from 'react';\nimport TodoListTemplate from './component/TodoListTemplate'\nimport Form from './component/Form';\nimport TodoItemList from './component/TodoItemList';\n\nclass App extends Component {\n\n    id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n    state = {\n        input: '',\n        todos: [\n            { id: 0, text: ' 리액트 소개', checked: false },\n            { id: 1, text: 'JSX 사용해보기', checked: true },\n            { id: 2, text: '라이프 사이클 이해하기', checked: false },\n        ]\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            input: e.target.value // input 의 다음 바뀔 값\n        });\n    }\n\n    handleCreate = () => {\n        const { input, todos } = this.state;\n        this.setState({\n            input: '', // 인풋 비우고\n            // concat 을 사용하여 배열에 추가\n            todos: todos.concat({\n                id: this.id++,\n                text: input,\n                checked: false\n            })\n        });\n    }\n\n    handleKeyPress = (e) => {\n        // 눌려진 키가 Enter 면 handleCreate 호출\n        if(e.key === 'Enter') {\n            this.handleCreate();\n        }\n    }\n\n    handleToggle = (id) => {\n        const { todos } = this.state;\n\n        // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n        const index = todos.findIndex(todo => todo.id === id);\n        const selected = todos[index]; // 선택한 객체\n\n        const nextTodos = [...todos]; // 배열을 복사\n\n        // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n        nextTodos[index] = {\n            ...selected,\n            checked: !selected.checked\n        };\n\n        this.setState({\n            todos: nextTodos\n        });\n    }\n\n    handleRemove = (id) => {\n        const { todos } = this.state;\n        this.setState({\n            todos: todos.filter(todo => todo.id !== id)\n        });\n    }\n\n    render() {\n        const { input, todos} = this.state;\n        const {\n            handleChange,\n            handleCreate,\n            handleKeyPress,\n            handleToggle,\n            handleRemove\n        } = this;\n\n        return (\n            <TodoListTemplate form={(\n                <Form\n                    value={input}\n                    onKeyPress={handleKeyPress}\n                    onChange={handleChange}\n                    onCreate={handleCreate}\n                />\n            )}>\n                <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n            </TodoListTemplate>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}